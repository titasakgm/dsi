<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>DSI Demo App</title>
    
    <link rel="stylesheet" type="text/css" href="/mapfish/mfbase/ext/resources/css/ext-all.css" />
    <link rel="stylesheet" type="text/css" href="/mapfish/mfbase/mapfish/mapfish.css" />

    <style>
      div.olControlMousePosition {
        font-family: Verdana;
        font-size: 1em;
        color: #FFF;
        padding-bottom: 5px;
      span.x-panel-header-text {
        font-weight: bold;
        color: #00F;
      }
    </style>
    <script type="text/javascript" src="/mapfish/mfbase/openlayers/lib/Firebug/firebug.js"></script>

    <!--
    <script src="http://maps.google.com/maps/api/js?v=3.2&sensor=false"></script>
    -->

    <script src='http://maps.google.com/maps?file=api&v=2&key=ABQIAAAANSH4gLdDtOLGbRXcM8JhLRQy0YMIzTaJQ9ibseWUKiF2cHzKTRStce5b7eW2MNUarHgsYkvan0sv_A'></script> 

    <script type="text/javascript" src="/mapfish/mfbase/openlayers/lib/OpenLayers.js"></script>
    <script type="text/javascript" src="/mapfish/mfbase/ext/adapter/ext/ext-base.js"></script>
    <script type="text/javascript" src="/mapfish/mfbase/ext/ext-all.js"></script>

    <script type="text/javascript" src="/mapfish/mfbase/geoext/lib/GeoExt.js"></script>

    <script type="text/javascript">
      // Because of a bug in Firefox 2 we need to specify the MapFish base path.
      // See https://bugzilla.mozilla.org/show_bug.cgi?id=351282
      var gMfLocation = "/mapfish/mfbase/mapfish/";
    </script>
    <script type="text/javascript" src="/mapfish/mfbase/mapfish/MapFish.js"></script>
    <script type="text/javascript" src="/mapfish/examples/examples.js"></script>
    
    <script type="text/javascript" src="/dsi/proj4js/lib/proj4js.js"></script>
        
    <script type="text/javascript">
    // reference local blank image
    Ext.BLANK_IMAGE_URL = '/mapfish/mfbase/ext/resources/images/default/s.gif';
     
    // create namespace
    Ext.namespace('toolbarExample');
     
    // create application
    toolbarExample.app = function() {  

      Proj4js.defs["EPSG:900913"] = "+title=Google Mercator EPSG:900913 +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs";
      Proj4js.defs["EPSG:4326"] = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs";
      Proj4js.defs["EPSG:32647"] = "+title=WGS 84 / UTM zone 47N +proj=utm +zone=47 +a=6378137 +b=6356075.3141403 +units=m  +towgs84=0,0,0,0,0,0,0 +no_defs";
      Proj4js.defs["EPSG:24047"] = "+title=Indian 1975 / UTM zone 47N +proj=utm +zone=47 +a=6377276.345 +b=6356075.41314024 +units=m  +towgs84=204.5,837.9,294.8,0,0,0,0 +no_defs";

        // private vars:
        var map, toolbarItems = [], viewport, vectorLayer;
        var markers, hili;
        var apiKey = "AnXErkelqCPb0UC5K-lCookgNa4-IwF1Cehgg9En9wcFz7iGblBxbZfm4484_qqK";

        var gcs = new Proj4js.Proj("EPSG:4326");
        var merc = new Proj4js.Proj("EPSG:900913");
        var utm = new Proj4js.Proj("EPSG:32647");
        var indian = new Proj4js.Proj("EPSG:24047");
        
        // private functions
        function dms2dd(ddd,mm,ss)
        {
          var d = parseFloat(ddd);
          var m = parseFloat(mm)/60.0;
          var s = parseFloat(ss)/3600.0;
          return d + m + s;
        }
        function dd2dms(ll)
        {
          //debugger;
          var d1 = ll;
          var d2 = parseInt(d1 / 100 * 100);
          var d3 = d1 - d2;
          var d4 = d3 * 60;
          var d5 = parseInt(d4);
          var d6 = d4 - d5;
          var d7 = d6 * 60;
          var dms = [];
          dms[0] = d2;
          dms[1] = d5;
          dms[2] = d7.toFixed(2);
          return dms;
        }

        function setMarker(lon, lat, msg){
          var lonLatMarker = new OpenLayers.LonLat(lon, lat).transform(gcs,merc);
          var feature = new OpenLayers.Feature(markers, lonLatMarker);
          feature.closeBox = true;
          feature.popupClass = OpenLayers.Class(OpenLayers.Popup.AnchoredBubble,
            {maxSize: new OpenLayers.Size(120, 75) } );
          feature.data.popupContentHTML = msg;
          feature.data.overflow = "hidden";

          var size = new OpenLayers.Size(21,25);
          var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
          var icon = new OpenLayers.Icon('http://www.google.com/mapfiles/marker.png', size, offset);
          var marker = new OpenLayers.Marker(lonLatMarker, icon);
          marker.feature = feature;

          var markerClick = function(evt) {
            if (this.popup == null) {
              this.popup = this.createPopup(this.closeBox);
              map.addPopup(this.popup);
              this.popup.show();
            } else {
              this.popup.toggle();
            }
            OpenLayers.Event.stop(evt);
          };
          markers.addMarker(marker);
          //map.events.register("click", feature, markerClick);
        }

        var createMap = function() {
          map = new OpenLayers.Map({
            projection: new OpenLayers.Projection("EPSG:900913"),
            displayProjection: new OpenLayers.Projection("EPSG:4326"),
            units: "m",
            maxResolution: 156543.0339,
            maxExtent: new OpenLayers.Bounds(-20037508.34, -20037508.34,
                                     20037508.34, 20037508.34),
            controls: [],
          });

          map.events.register('mousemove', map, function (e) {
            var lonlat = map.getLonLatFromViewPortPx(e.xy);
            var pt = new Proj4js.Point(lonlat.lon, lonlat.lat);
            var p1 = Proj4js.transform(merc, gcs, pt);
            var p2 = Proj4js.transform(merc, utm, pt);
            var p3 = Proj4js.transform(merc, indian, pt);
                        
            debugger;

            var dmslat = dd2dms(p2.lat);
            var dmslon = dd2dms(p2.lon);
            var latstr = dmslat[0] + "&deg; " + dmslat[1] + "&apos; " + dmslat[2] + "&quot;";
            var lonstr = dmslon[0] + "&deg; " + dmslon[1] + "&apos; " + dmslon[2] + "&quot;";
            toolbarExample.app. setStatus("Current Position: " + latstr + " N " + lonstr + " E");
          });

          hili = new OpenLayers.Layer.WMS("Hili",
            "http://203.157.240.9/cgi-bin/mapserv",
            {map: '/ms521/map/hili.map', layers: 'hili', 'transparent': true},
            {isBaseLayer: false, displayInLayerSwitcher: false, singleTile: true, ratio: 1 }
          );
          map.addLayer(hili);
          hili.setOpacity(0);        
        };

        var createGoogleLayer = function() {
          var ghyb = new OpenLayers.Layer.Google(
            "Google Hybrid",
            {sphericalMercator: true,type: G_HYBRID_MAP, numZoomLevels: 19},
            {isBaseLayer: true}
          );
          map.addLayer(ghyb);

          var gphy = new OpenLayers.Layer.Google(
            "Google Physical",
            {sphericalMercator: true,type: G_PHYSICAL_MAP, numZoomLevels: 16},
            {isBaseLayer: false}
          );
          map.addLayer(gphy);
        };

        var createMarker = function() {
          markers = new OpenLayers.Layer.Markers( "Markers", {
            displayInLayerSwitcher: false
          });
          map.addLayer(markers);
        };

        var createWmsLayer = function(name, url, params, options) {
            map.addLayer(new OpenLayers.Layer.WMS(name, url, params, options));
        };
        
        var createVectorLayer = function() {
            vectorLayer = new OpenLayers.Layer.Vector("vector", {
                displayInLayerSwitcher: false
            });
            map.addLayer(vectorLayer);
            
            vectorLayer.events.register('featureadded', vectorLayer, function(){
                var l = this.features.length;
                var msg = (l==1) ? 'There is one feature on map' : 'There are now ' + l + ' features on map';
                toolbarExample.app.setStatus(msg);
            });
            
            return vectorLayer;
        };

        var addMapControls = function() {
            // navigation control
            var navControl = new OpenLayers.Control.Navigation({
                type: OpenLayers.Control.TYPE_TOGGLE,
                zoomWheelEnabled: true
            });
            map.addControl(navControl);
            map.addControl(new OpenLayers.Control.MousePosition());
            map.addControl(new OpenLayers.Control.LayerSwitcher());
            map.addControl(new OpenLayers.Control.PanZoomBar());
            navControl.activate();
        };
        
        var center = new OpenLayers.LonLat(100,13);
        var thailand = center.transform(gcs,merc);

        var test_gps = function() {
          Ext.getCmp('londd').setValue(100);
          Ext.getCmp('lonmm').setValue(33);
          Ext.getCmp('lonss').setValue(57.9126);
          Ext.getCmp('latdd').setValue(13);
          Ext.getCmp('latmm').setValue(53);
          Ext.getCmp('latss').setValue(26.757);
        }

        var check_gps = function(){
          var lodd = Ext.getCmp('londd').getValue();        
          var lomm = Ext.getCmp('lonmm').getValue();        
          var loss = Ext.getCmp('lonss').getValue();        
          var ladd = Ext.getCmp('latdd').getValue();        
          var lamm = Ext.getCmp('latmm').getValue();        
          var lass = Ext.getCmp('latss').getValue();        

          report(lodd,lomm,loss,ladd,lamm,lass);
        }

        var report = function(lodd,lomm,loss,ladd,lamm,lass) {
          
          Ext.Ajax.request({
            url: 'rb/checkLonLat2.rb'
            ,params: {
              method: 'GET'
              ,lodd: lodd
              ,lomm: lomm
              ,loss: loss
              ,ladd: ladd
              ,lamm: lamm
              ,lass: lass
              ,format: 'json'
            }
	    ,failure: function(response, opts){
	      alert("checkLonLat2 > failure");
	      return false;            
            }
            ,success: function(response, opts){
              var data = eval( '(' + response.responseText + ')' );
              var lon = data.lon;
              var lat = data.lat;
              var msg = data.msg;

              var p1 = new OpenLayers.LonLat(lon,lat);
              var p2 = p1.transform(gcs,merc);
              map.setCenter(p2, 14);

              var size = new OpenLayers.Size(21,25);
              var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
              var icon = new OpenLayers.Icon('http://www.google.com/mapfiles/marker.png', size, offset);
              markers.addMarker(new OpenLayers.Marker(p2,icon));
              Ext.Msg.alert('Result',data.msg);
            }
          });
        };

        var gps = new Ext.FormPanel({
          id: 'id_gps',
          labelAlign: 'top',
          align: 'center',
          frame: true,
          title: 'ตำแหน่งพิกัด GPS',
          bodyStyle: 'padding:5px 5px 5px',
          width: 250,
          items: [{
            layout:'column',
            items:[{
              columnWidth:.3,
              layout: 'form',
              items: [{
                xtype:'textfield',
                id: 'latdd',
                fieldLabel: 'Lat:DD',
                labelSeparator: '',
                name: 'latdd',
                anchor:'95%'
              },{
                xtype:'textfield',
                id: 'londd',
                fieldLabel: 'Lon:DD',
                labelSeparator: '',
                name: 'londd',
                anchor:'95%'
              }]
            },{
              columnWidth:.3,
              layout: 'form',
              items: [{
                xtype:'textfield',
                id: 'latmm',
                fieldLabel: 'Lat:MM',
                labelSeparator: '',
                name: 'latmm',
                anchor:'95%'
              },{
                xtype:'textfield',
                id: 'lonmm',
                fieldLabel: 'Lon:MM',
                labelSeparator: '',
                name: 'lonmm',
                anchor:'95%'
              }]
            },{
              columnWidth:.3,
              layout: 'form',
              items: [{
                xtype:'textfield',
                id: 'latss',
                fieldLabel: 'Lat:SS',
                labelSeparator: '',
                name: 'latss',
                anchor:'100%'
              },{
                xtype:'textfield',
                id: 'lonss',
                fieldLabel: 'Lon:SS',
                labelSeparator: '',
                name: 'lonss',
                anchor:'100%'
              }]
            },{
              columnWidth:.1,
              layout: 'form',
              items: [{
                xtype: 'textfield',
                fieldLabel: '',
                labelSeparator: '',
                value: 'N',
                anchor:'100%',
                readOnly: true
              },{
                xtype: 'textfield',
                fieldLabel: '',
                labelSeparator: '',
                value: 'E',
                anchor:'100%',
                readOnly: true
              }]
            }],
            bodyCfg: {tag: 'center'},
            buttons: [{
              text: 'Check',
              handler: check_gps
            },{
              text: 'Clear',
              handler: function(){
                gps.getForm().reset();
                markers.clearMarkers();
              }
            },{
              text: 'Test',
              handler: test_gps
            }]
          }]
        });

        var check_gps_utm = function(){
          var utmn = Ext.getCmp('utmn').getValue();
          var utme = Ext.getCmp('utme').getValue();
          var zone47 = Ext.getCmp('zone47').checked;
          if (zone47 == true)
            zone = '47';
          else
            zone = '48';

          report_utm(utmn, utme, zone);
        }

        var report_utm = function(utmn, utme, zone) {
          
          Ext.Ajax.request({
            url: 'rb/checkUTM.rb'
            ,params: {
              method: 'GET'
              ,utmn: utmn
              ,utme: utme
              ,zone: zone
              ,format: 'json'
            }
	    ,failure: function(response, opts){
	      alert("checkUTM > failure");
	      return false;            
            }
            ,success: function(response, opts){
              var data = eval( '(' + response.responseText + ')' );
              var lon = data.lon;
              var lat = data.lat;
              var msg = data.msg;

              var p1 = new OpenLayers.LonLat(lon,lat);
              var p2 = p1.transform(gcs,merc);
              map.setCenter(p2, 14);

              var size = new OpenLayers.Size(21,25);
              var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
              var icon = new OpenLayers.Icon('http://www.google.com/mapfiles/marker.png', size, offset);
              markers.addMarker(new OpenLayers.Marker(p2,icon));
              Ext.Msg.alert('Result', data.msg);
            }
          });
        };

        var test_gps_utm = function(){
          Ext.getCmp('utmn').setValue(1536201);
          Ext.getCmp('utme').setValue(669221);
        }

        var gps_utm = new Ext.FormPanel({
          id: 'id_gps_utm',
          labelAlign: 'top',
          align: 'center',
          frame: true,
          title: 'ตำแหน่งพิกัด GPS (UTM)',
          bodyStyle: 'padding:5px 5px 5px',
          width: 250,
          items: [{
            layout:'column',
            items:[{
              columnWidth:.9,
              layout: 'form',
              items: [{
                xtype:'textfield',
                id: 'utm_N',
                fieldLabel: 'Northing:Meters',
                labelSeparator: '',
                id: 'utmn',
                anchor:'95%'
              },{
                xtype:'textfield',
                id: 'utm_e',
                fieldLabel: 'Easting:Meters',
                labelSeparator: '',
                id: 'utme',
                anchor:'95%'
              }]
            },{
              columnWidth:.1,
              layout: 'form',
              items: [{
                xtype: 'textfield',
                fieldLabel: '',
                labelSeparator: '',
                value: 'N',
                anchor:'100%',
                readOnly: true
              },{
                xtype: 'textfield',
                fieldLabel: '',
                labelSeparator: '',
                value: 'E',
                anchor:'100%',
                readOnly: true
              }]
            },{
              columnWidth: .5,
              layout: 'form',
              items: [{
                xtype: 'radio',
                id: 'zone47',
                name: 'zone',
                fieldLabel: 'Zone 47',
                checked: true,
                labelSeparator: '',
                anchor:'100%'
              }]
            },{
              columnWidth: .5,
              layout: 'form',
              items: [{
                xtype: 'radio',
                id: 'zone48',
                name: 'zone',
                fieldLabel: 'Zone 48',
                labelSeparator: '',
                anchor:'100%'
              }]  
            }],
            bodyCfg: {tag: 'center'},
            buttons: [{
              text: 'Check',
              handler: check_gps_utm
            },{
              text: 'Clear',
              handler: function(){
                gps_utm.getForm().reset();
                markers.clearMarkers();
              }
            },{
              text: 'Test',
              handler: test_gps_utm
            }]
          }]
        });

        var check_gps_utm = function(){
          var utmn = Ext.getCmp('utmn').getValue();
          var utme = Ext.getCmp('utme').getValue();
          var zone47 = Ext.getCmp('zone47').checked;
          if (zone47 == true)
            zone = '47';
          else
            zone = '48';

          report_utm(utmn, utme, zone);
        }

        var report_utm = function(utmn, utme, zone) {
          
          Ext.Ajax.request({
            url: 'rb/checkUTM.rb'
            ,params: {
              method: 'GET'
              ,utmn: utmn
              ,utme: utme
              ,zone: zone
              ,format: 'json'
            }
	    ,failure: function(response, opts){
	      alert("checkUTM > failure");
	      return false;            
            }
            ,success: function(response, opts){
              var data = eval( '(' + response.responseText + ')' );
              var lon = data.lon;
              var lat = data.lat;
              var msg = data.msg;

              var p1 = new OpenLayers.LonLat(lon,lat);
              var p2 = p1.transform(gcs,merc);
              map.setCenter(p2, 14);

              var size = new OpenLayers.Size(21,25);
              var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
              var icon = new OpenLayers.Icon('http://www.google.com/mapfiles/marker.png', size, offset);
              markers.addMarker(new OpenLayers.Marker(p2,icon));
              Ext.Msg.alert('Result', data.msg);
            }
          });
        };

        var check_gps_utm_indian = function(){
          var utmni = Ext.getCmp('utmni').getValue();
          var utmei = Ext.getCmp('utmei').getValue();
          var zone47i = Ext.getCmp('zone47i').checked;
          if (zone47i == true)
            zonei = '47';
          else
            zonei = '48';

          report_utm_indian(utmni, utmei, zonei);
        }

        var report_utm_indian = function(utmni, utmei, zonei) {
          
          Ext.Ajax.request({
            url: 'rb/checkUTMIndian.rb'
            ,params: {
              method: 'GET'
              ,utmn: utmni
              ,utme: utmei
              ,zone: zonei
              ,format: 'json'
            }
	    ,failure: function(response, opts){
	      alert("checkUTMIndian > failure");
	      return false;            
            }
            ,success: function(response, opts){
              var data = eval( '(' + response.responseText + ')' );
              var lon = data.lon;
              var lat = data.lat;
              var msg = data.msg;

              var p1 = new OpenLayers.LonLat(lon,lat);
              var p2 = p1.transform(gcs,merc);
              map.setCenter(p2, 14);

              var size = new OpenLayers.Size(21,25);
              var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
              var icon = new OpenLayers.Icon('http://www.google.com/mapfiles/marker.png', size, offset);
              markers.addMarker(new OpenLayers.Marker(p2,icon));
              Ext.Msg.alert('Result', data.msg);
            }
          });
        };

        var test_gps_utm_indian = function(){
          Ext.getCmp('utmni').setValue(1536078);
          Ext.getCmp('utmei').setValue(669198);
        }

        var gps_utm_indian = new Ext.FormPanel({
          id: 'id_gps_utm_indian',
          labelAlign: 'top',
          align: 'center',
          frame: true,
          title: 'ตำแหน่งพิกัด GPS (UTM Indian 1975)',
          bodyStyle: 'padding:5px 5px 5px',
          width: 250,
          items: [{
            layout:'column',
            items:[{
              columnWidth:.9,
              layout: 'form',
              items: [{
                xtype:'textfield',
                fieldLabel: 'Northing:Meters',
                labelSeparator: '',
                id: 'utmni',
                anchor:'95%'
              },{
                xtype:'textfield',
                fieldLabel: 'Easting:Meters',
                labelSeparator: '',
                id: 'utmei',
                anchor:'95%'
              }]
            },{
              columnWidth:.1,
              layout: 'form',
              items: [{
                xtype: 'textfield',
                fieldLabel: '',
                labelSeparator: '',
                value: 'N',
                anchor:'100%',
                readOnly: true
              },{
                xtype: 'textfield',
                fieldLabel: '',
                labelSeparator: '',
                value: 'E',
                anchor:'100%',
                readOnly: true
              }]
            },{
              columnWidth: .5,
              layout: 'form',
              items: [{
                xtype: 'radio',
                id: 'zone47i',
                name: 'zonei',
                fieldLabel: 'Zone 47',
                checked: true,
                labelSeparator: '',
                anchor:'100%'
              }]
            },{
              columnWidth: .5,
              layout: 'form',
              items: [{
                xtype: 'radio',
                id: 'zone48i',
                name: 'zonei',
                fieldLabel: 'Zone 48',
                labelSeparator: '',
                anchor:'100%'
              }]  
            }],
            bodyCfg: {tag: 'center'},
            buttons: [{
              text: 'Check',
              handler: check_gps_utm_indian
            },{
              text: 'Clear',
              handler: function(){
                gps_utm_indian.getForm().reset();
                markers.clearMarkers();
              }
            },{
              text: 'Test',
              handler: test_gps_utm_indian
            }]
          }]
        });

        var search_kw = function(){
          var kw = Ext.getCmp('id_kw').getValue();        
          search(kw);
        }

        var search = function(kw) {
          //debugger;
          Ext.Ajax.request({
            url: 'rb/search-google.rb'
            ,params: {
              method: 'GET'
              ,kw: kw
            }
            ,success: function(response, opts){
              var data = eval( '(' + response.responseText + ')' );
              var lon = data.lon
              var lat = data.lat;
              var text = data.text;
              var name = data.name;

              var zoom = 14;
              if (text)
              {
                if (text.indexOf("จ.") == 0)
                  zoom = 8;
                else if (text.indexOf("อ.") == 0)
                  zoom = 10;
                else if (text.indexOf("ต.") == 0)
                  zoom = 12;
                else
                  zoom = 14;
              }

              var p1 = new OpenLayers.LonLat(lon,lat);
              var p2 = p1.transform(gcs,merc);

              setMarker(lon, lat, text);
              map.setCenter(p2, zoom);

              //var size = new OpenLayers.Size(21,25);
              //var offset = new OpenLayers.Pixel(-(size.w/2), -size.h);
              //var icon = new OpenLayers.Icon('http://www.google.com/mapfiles/marker.png', size, offset);
              //markers.clearMarkers();
              //markers.addMarker(new OpenLayers.Marker(p2,icon));

              Ext.Msg.alert('Result',data.text + '<br>lat:' + parseFloat(lat).toFixed(2) + ' lon:' + parseFloat(lon).toFixed(2));
              if (data.text.search(/จ./) == 0 || data.text.search(/อ./) == 0 || data.text.search(/ต./) == 0)
                hili.setOpacity(.5);
              //addWKT(gid);
            }
          });
        };

        function addWKT(gid)
        {
          var url = "rb/getPolygonWKT.rb?gid=" + gid;   
          OpenLayers.loadURL(url, '', this, function(response) {
            debugger;
            addWKTFeatures(response.responseText);
          });
        }
	       
        function addWKTFeatures(wktString)
        {
          wkt = new OpenLayers.Format.WKT();
          features = wkt.read(wktString);
	  debugger;
          return false;
          var bounds;
          if(features) {
            if(features.constructor != Array) {
              features = [features];
            }
            for(var i=0; i<features.length; ++i) {
              if (!bounds) {
                bounds = features[i].geometry.getBounds();
                bounds = bounds.transform(gcs, merc);
              } else {
                bounds.extend(features[i].geometry.getBounds().transform(gcs,merc));
              }
            }
          }
          vectorLayer.addFeatures(features[0].geometry.transform(gcs, merc));
          map.zoomToExtent(bounds);
        }

        var myTextField = new Ext.form.TextField({
          id: 'id_kw',
          fieldLabel: 'ระบุคำค้น',
          labelSeparator: ':',
          name: 'kw',
          anchor:'95%'
        });

        myTextField.on("specialkey", specialKey, this);

        function specialKey(field, e) {
          if ( e.getKey() == e.RETURN || e.getKey() == e.ENTER ) {
            search_kw();
          }
        }

        var searchkw = new Ext.FormPanel({
          id: 'id_searchkw',
          labelAlign: 'left',
          align: 'center',
          frame: true,
          title: 'ค้นหาสถานที่',
          bodyStyle: 'padding:5px 5px 5px',
          width: 250,
          items: [{
            layout: 'form',
            items: [ myTextField ],
            bodyCfg: {tag: 'center'},
            buttons: [{
              text: 'Search',
              handler: search_kw
            },{
              text: 'Clear',
              handler: function(){
                searchkw.getForm().reset();
                markers.clearMarkers();
                hili.setOpacity(0);
                Ext.getCmp('id_kw').focus();
              }
            }]
          }]
        });

        function createTreeModel() {
            return [{
		text: "Base Map",
		leaf: false,
		children: [{
                  text: "Google Hybrid",
                  leaf: false,
                  checked: true,
                  layerName: "Google Hybrid"
                },{
                  text: "Google Physical",
                  leaf: false,
                  checked: false,
                  layerName: "Google Physical"
		}]
              },{
		text: "Overlays",
		leaf: false,
		children: [{
                  text: "เขตอุทยานแห่งชาติ",
                  leaf: false,
                  checked: false,
                  layerName: "เขตอุทยานแห่งชาติ"
                },{
                  text: "เขตป่าสงวน",
                  leaf: false,
                  checked: false,
                  layerName: "เขตป่าสงวน"
                //},{
                  //text: "เขตป่า use forest",
                  //leaf: false,
                  //checked: false,
                  //layerName: "เขตป่า use forest"
                },{
                  text: "ชั้นความสูง",
                  leaf: false,
                  checked: false,
                  layerName: "ชั้นความสูง"
                },{
                  text: "จังหวัด",
                  leaf: false,
                  checked: false,
                  layerName: "จังหวัด"
                },{
                  text: "อำเภอ",
                  leaf: false,
                  checked: false,
                  layerName: "อำเภอ"
                },{
                  text: "ตำบล",
                  leaf: false,
                  checked: false,
                  layerName: "ตำบล"
                },{
                  text: "หมู่บ้าน",
                  leaf: false,
                  checked: false,
                  layerName: "หมู่บ้าน"
                },{
                  text: "ธรณีวิทยา",
                  leaf: false,
                  checked: false,
                  layerName: "ธรณีวิทยา"
                },{
                  text: "แหล่งแร่",
                  leaf: false,
                  checked: false,
                  layerName: "แหล่งแร่"
                },{
                  text: "พื้นที่สปก.",
                  leaf: false,
                  checked: false,
                  layerName: "พื้นที่สปก."
                }]
            }];
        }

        var model = createTreeModel();

        var createViewport = function() {
            viewport = new Ext.Viewport({
                layout: 'border',
                items: [
                    new Ext.BoxComponent({
                        region: 'north',
                        el: 'north',
                        height: 32,
                        margins: {left: 5,top: 5}
                    }), {
                        region: 'west',
                        title: '',
                        width: 270,
                        border: true,
                        margins: '5 0 0 5',
                        frame: false,
                        split: true,
                        layout: 'accordion',
                        items: [{
                            xtype: 'layertree',
                            title: '<b>เลือกชั้นข้อมูล</b>',
                            map: map,
                            height: 400,
                            showWmsLegend: true,
                            enableDD: true,
                            model: model,
                            plugins: [
                              mapfish.widgets.LayerTree.createContextualMenuPlugin([
                                'opacitySlide',
                                'remove'
                              ])
                            ]   
                          }, gps, gps_utm, gps_utm_indian, searchkw
                        ]
                    },{
                        region: 'center',
                        layout: 'fit',
                        frame: false,
                        border: true,
                        margins: '5 5 0 0',
                        items: [{
                            xtype: 'gx_mappanel',
                            map: map,
                            tbar: toolbarItems,
                            border: false,
                            center: thailand,
                            zoom: 5
                        }]
                    },{
                        region: 'south',
                        id: 'statusBar',
                        border: false,
                        bodyStyle: 'text-align:left;padding:0px;',
                        height: 25,
                        margins: '5 0 0 0',
                        frame: true,
                        html: 'a status bar'
                    }
                ]
            });
        };
        
        var createToolbar = function() {
            var action;
            var thai;

            var createSeparator = function() {
               toolbarItems.push(" ");
               toolbarItems.push("-");
               toolbarItems.push(" ");
            };

            action = new GeoExt.Action({
                iconCls: 'zoomfull',
                handler: function(){
                  map.setCenter(thailand, 5);
                },
                tooltip: 'Zoom to Thailand'
            });

            toolbarItems.push(action);

            createSeparator();

            action = new GeoExt.Action({
                control: new OpenLayers.Control.ZoomBox(),
                tooltip: 'Zoom in: click in the map or use the left mouse button and drag to create a rectangle',
                map: map,
                iconCls: 'zoomin',
                toggleGroup: 'map'
            });

            toolbarItems.push(action);

            action = new GeoExt.Action({
                control: new OpenLayers.Control.ZoomBox({
                    out: true
                }),
                tooltip: 'Zoom out: click in the map or use the left mouse button and drag to create a rectangle',
                map: map,
                iconCls: 'zoomout',
                toggleGroup: 'map'
            });

            toolbarItems.push(action);

            action = new GeoExt.Action({
                control: new OpenLayers.Control.DragPan({
                    isDefault: true
                }),
                tooltip: 'Pan map: keep the left mouse button pressed and drag the map',
                map: map,
                iconCls: 'pan',
                toggleGroup: 'map'
            });

            toolbarItems.push(action);

            createSeparator();

            action = new GeoExt.Action({
                control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Point),
                tooltip: 'Draw a point on the map',
                map: map,
                iconCls: 'drawpoint',
                toggleGroup: 'map'
            });

            toolbarItems.push(action);

            action = new GeoExt.Action({
                control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Path),
                tooltip: 'Draw a linestring on the map',
                map: map,
                iconCls: 'drawline',
                toggleGroup: 'map'
            });

            toolbarItems.push(action);

            action = new GeoExt.Action({
                control: new OpenLayers.Control.DrawFeature(vectorLayer, OpenLayers.Handler.Polygon),
                tooltip: 'Draw a polygon on the map',
                map: map,
                iconCls: 'drawpolygon',
                toggleGroup: 'map'
            });

            toolbarItems.push(action);

            createSeparator();

            action = new GeoExt.Action({
                control: new OpenLayers.Control.ModifyFeature(vectorLayer),
                tooltip: 'Edit a feature on the map',
                map: map,
                iconCls: 'modifyfeature',
                toggleGroup: 'map'
            });

            toolbarItems.push(action);

            action = new GeoExt.Action({
                control: new OpenLayers.Control.SelectFeature(vectorLayer),
                tooltip: 'Remove a feature on the map',
                map: map,
                iconCls: 'removefeature',
                toggleGroup: 'map',
                handler: function() {
                  if (vectorLayer.features)
                    vectorLayer.removeFeatures(vectorLayer.features);
                }
            });

            toolbarItems.push(action);

            createSeparator();
            
            ctrl = new OpenLayers.Control.NavigationHistory();

            map.addControl(ctrl);

            action = new GeoExt.Action({
                   tooltip: "Previous view",
                   control: ctrl.previous,
                   iconCls: 'back',
                   disabled: true
               });
            toolbarItems.push(action);

            action = new GeoExt.Action({
                   tooltip: "Next view",
                   control: ctrl.next,
                   iconCls: 'next',
                   disabled: true
               });
            toolbarItems.push(action);

            createSeparator();
        };
        
        // public space:
        return {
            // for debug, we make this property public:
            vector: null,
            
            setStatus: function(text) {
                Ext.getCmp('statusBar').body.dom.innerHTML = text;
            },
            
            init: function() {
                Ext.QuickTips.init();
                createMap();

                createWmsLayer(
                  "เขตอุทยานแห่งชาติ",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'npark', 'transparent': true},
                  {isBaseLayer: false}
                );

                createWmsLayer(
                  "เขตป่าสงวน",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'rforest', 'transparent': true},
                  {isBaseLayer: false}
                );

                //createWmsLayer(
                  //"เขตป่า use forest",
                  //"http://203.157.240.9/cgi-bin/mapserv",
                  //{map: '/ms521/map/wms-dsi.map', layers: 'uforest', 'transparent': true},
                  //{isBaseLayer: false}
                //);

                createWmsLayer(
                  "ชั้นความสูง",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'contour', 'transparent': true},
                  {isBaseLayer: false}
                );

                createWmsLayer(
                  "จังหวัด",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'no_02_province', 'transparent': true},
                  {isBaseLayer: false}
                );

                createWmsLayer(
                  "อำเภอ",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'no_03_amphoe', 'transparent': true},
                  {isBaseLayer: false}
                );

                createWmsLayer(
                  "ตำบล",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'no_04_tambon', 'transparent': true},
                  {isBaseLayer: false}
                );

                createWmsLayer(
                  "หมู่บ้าน",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'no_06_muban', 'transparent': true},
                  {isBaseLayer: false}
                );

                createWmsLayer(
                  "ธรณีวิทยา",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'no_13_geology', 'transparent': true},
                  {isBaseLayer: false}
                );

                createWmsLayer(
                  "แหล่งแร่",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'no_14_mineral', 'transparent': true},
                  {isBaseLayer: false}
                );
                
                createWmsLayer(
                  "พื้นที่สปก.",
                  "http://203.157.240.9/cgi-bin/mapserv",
                  {map: '/ms521/map/wms-dsi.map', layers: 'no_22_spk', 'transparent': true},
                  {isBaseLayer: false}
                );                

                //createWmsLayer(
                  //"Test Topo",
                  //"http://203.157.240.9/cgi-bin/mapserv",
                  //{map: '/ms521/map/wms-dsi.map', layers: 'testtopo', 'transparent': true},
                  //{isBaseLayer: false}
                //);

                createGoogleLayer();

                createMarker();

                this.vector = createVectorLayer();
                // vector layer is now accessible via toolbarExample.app.vector
                
                addMapControls();
                createToolbar();
                createViewport();
                
                // display some text in the status bar:
                this.setStatus('Status: information');
            }
        };
    }(); // end of app
    
    Ext.onReady(toolbarExample.app.init, toolbarExample.app);
     
     </script>
     <style type="text/css">
        .float-left {
          float: left;
        }
        .clear-left {
          clear: left;
        }
     </style>
  </head>

  <body>
    <div id="north">
       <p style="font-size:16pt;color:#15428B;font-weight:bold">DSI Web Map Development</p>
    </div>
  </body>
</html>
